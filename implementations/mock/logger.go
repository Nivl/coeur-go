// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nivl/coeur/logger (interfaces: Logger)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	logger "github.com/Nivl/coeur/logger"
	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// AddExtra mocks base method.
func (m *MockLogger) AddExtra(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddExtra", arg0, arg1)
}

// AddExtra indicates an expected call of AddExtra.
func (mr *MockLoggerMockRecorder) AddExtra(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExtra", reflect.TypeOf((*MockLogger)(nil).AddExtra), arg0, arg1)
}

// Close mocks base method.
func (m *MockLogger) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockLoggerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLogger)(nil).Close))
}

// Debug mocks base method.
func (m *MockLogger) Debug(arg0 context.Context, arg1 string, arg2 ...map[string]interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Debug", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLogger) Error(arg0 context.Context, arg1 string, arg2 ...map[string]interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Error", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockLogger) Info(arg0 context.Context, arg1 string, arg2 ...map[string]interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}

// NewChild mocks base method.
func (m *MockLogger) NewChild() logger.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewChild")
	ret0, _ := ret[0].(logger.Logger)
	return ret0
}

// NewChild indicates an expected call of NewChild.
func (mr *MockLoggerMockRecorder) NewChild() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewChild", reflect.TypeOf((*MockLogger)(nil).NewChild))
}

// RemoveExtra mocks base method.
func (m *MockLogger) RemoveExtra(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveExtra", arg0)
}

// RemoveExtra indicates an expected call of RemoveExtra.
func (mr *MockLoggerMockRecorder) RemoveExtra(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveExtra", reflect.TypeOf((*MockLogger)(nil).RemoveExtra), arg0)
}

// SetExtra mocks base method.
func (m *MockLogger) SetExtra(arg0 map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExtra", arg0)
}

// SetExtra indicates an expected call of SetExtra.
func (mr *MockLoggerMockRecorder) SetExtra(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExtra", reflect.TypeOf((*MockLogger)(nil).SetExtra), arg0)
}

// Warning mocks base method.
func (m *MockLogger) Warning(arg0 context.Context, arg1 string, arg2 ...map[string]interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Warning", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Warning indicates an expected call of Warning.
func (mr *MockLoggerMockRecorder) Warning(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warning", reflect.TypeOf((*MockLogger)(nil).Warning), varargs...)
}
