// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Nivl/coeur/errtracking (interfaces: Tracker)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	errtracking "github.com/Nivl/coeur/errtracking"
	gomock "github.com/golang/mock/gomock"
)

// MockTracker is a mock of Tracker interface.
type MockTracker struct {
	ctrl     *gomock.Controller
	recorder *MockTrackerMockRecorder
}

// MockTrackerMockRecorder is the mock recorder for MockTracker.
type MockTrackerMockRecorder struct {
	mock *MockTracker
}

// NewMockTracker creates a new mock instance.
func NewMockTracker(ctrl *gomock.Controller) *MockTracker {
	mock := &MockTracker{ctrl: ctrl}
	mock.recorder = &MockTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracker) EXPECT() *MockTrackerMockRecorder {
	return m.recorder
}

// AddExtra mocks base method.
func (m *MockTracker) AddExtra(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddExtra", arg0, arg1)
}

// AddExtra indicates an expected call of AddExtra.
func (mr *MockTrackerMockRecorder) AddExtra(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExtra", reflect.TypeOf((*MockTracker)(nil).AddExtra), arg0, arg1)
}

// AddExtras mocks base method.
func (m *MockTracker) AddExtras(arg0 map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddExtras", arg0)
}

// AddExtras indicates an expected call of AddExtras.
func (mr *MockTrackerMockRecorder) AddExtras(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExtras", reflect.TypeOf((*MockTracker)(nil).AddExtras), arg0)
}

// AddTag mocks base method.
func (m *MockTracker) AddTag(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTag", arg0, arg1)
}

// AddTag indicates an expected call of AddTag.
func (mr *MockTrackerMockRecorder) AddTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTag", reflect.TypeOf((*MockTracker)(nil).AddTag), arg0, arg1)
}

// AddTags mocks base method.
func (m *MockTracker) AddTags(arg0 map[string]string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTags", arg0)
}

// AddTags indicates an expected call of AddTags.
func (mr *MockTrackerMockRecorder) AddTags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTags", reflect.TypeOf((*MockTracker)(nil).AddTags), arg0)
}

// Close mocks base method.
func (m *MockTracker) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTrackerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTracker)(nil).Close))
}

// NewChild mocks base method.
func (m *MockTracker) NewChild() errtracking.Tracker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewChild")
	ret0, _ := ret[0].(errtracking.Tracker)
	return ret0
}

// NewChild indicates an expected call of NewChild.
func (mr *MockTrackerMockRecorder) NewChild() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewChild", reflect.TypeOf((*MockTracker)(nil).NewChild))
}

// RemoveExtra mocks base method.
func (m *MockTracker) RemoveExtra(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveExtra", arg0)
}

// RemoveExtra indicates an expected call of RemoveExtra.
func (mr *MockTrackerMockRecorder) RemoveExtra(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveExtra", reflect.TypeOf((*MockTracker)(nil).RemoveExtra), arg0)
}

// RemoveTag mocks base method.
func (m *MockTracker) RemoveTag(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveTag", arg0)
}

// RemoveTag indicates an expected call of RemoveTag.
func (mr *MockTrackerMockRecorder) RemoveTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTag", reflect.TypeOf((*MockTracker)(nil).RemoveTag), arg0)
}

// RemoveUser mocks base method.
func (m *MockTracker) RemoveUser(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveUser", arg0)
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockTrackerMockRecorder) RemoveUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockTracker)(nil).RemoveUser), arg0)
}

// ReportError mocks base method.
func (m *MockTracker) ReportError(arg0 context.Context, arg1 error, arg2 ...map[string]interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ReportError", varargs...)
}

// ReportError indicates an expected call of ReportError.
func (mr *MockTrackerMockRecorder) ReportError(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportError", reflect.TypeOf((*MockTracker)(nil).ReportError), varargs...)
}

// SetUser mocks base method.
func (m *MockTracker) SetUser(arg0 context.Context, arg1 errtracking.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUser", arg0, arg1)
}

// SetUser indicates an expected call of SetUser.
func (mr *MockTrackerMockRecorder) SetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockTracker)(nil).SetUser), arg0, arg1)
}
